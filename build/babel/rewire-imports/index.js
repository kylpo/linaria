'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
function getReplacement(value) {
  return (value + '/build/index.runtime.js').replace(/\/\//g, '/');
}

function isLinariaImport(value) {
  try {
    return require.resolve(value) === require.resolve('linaria');
  } catch (e) {
    /* istanbul ignore next */
    return false;
  }
}

exports.default = function (_ref) {
  var types = _ref.types;
  return {
    visitor: {
      Program: {
        enter: function enter(path, state) {
          state.shouldSkip =
          // $FlowFixMe
          path.container.tokens.some(function (token) {
            return token.type === 'CommentBlock' && token.value.trim() === 'linaria-preval';
          });
        }
      },
      ImportDeclaration: function ImportDeclaration(path, state) {
        if (!state.shouldSkip && isLinariaImport(path.node.source.value)) {
          path.node.source.value = getReplacement(path.node.source.value);
        }
      },
      CallExpression: function CallExpression(path, state) {
        if (!state.shouldSkip && path.node.callee.name === 'require' && path.node.arguments.length === 1) {
          var argument = path.node.arguments[0];

          if (types.isStringLiteral(argument)) {
            if (isLinariaImport(argument.value)) {
              argument.value = getReplacement(argument.value);
            }
          } else if (types.isConditionalExpression(argument)) {
            if (types.isStringLiteral(argument.consequent) && isLinariaImport(argument.consequent.value)) {
              argument.consequent.value = getReplacement(argument.consequent.value);
            }

            if (types.isStringLiteral(argument.alternate) && isLinariaImport(argument.alternate.value)) {
              argument.alternate.value = getReplacement(argument.alternate.value);
            }
          }
        }
      }
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iYWJlbC9yZXdpcmUtaW1wb3J0cy9pbmRleC5qcyJdLCJuYW1lcyI6WyJnZXRSZXBsYWNlbWVudCIsInZhbHVlIiwicmVwbGFjZSIsImlzTGluYXJpYUltcG9ydCIsInJlcXVpcmUiLCJyZXNvbHZlIiwiZSIsInR5cGVzIiwidmlzaXRvciIsIlByb2dyYW0iLCJlbnRlciIsInBhdGgiLCJzdGF0ZSIsInNob3VsZFNraXAiLCJjb250YWluZXIiLCJ0b2tlbnMiLCJzb21lIiwidG9rZW4iLCJ0eXBlIiwidHJpbSIsIkltcG9ydERlY2xhcmF0aW9uIiwibm9kZSIsInNvdXJjZSIsIkNhbGxFeHByZXNzaW9uIiwiY2FsbGVlIiwibmFtZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3VtZW50IiwiaXNTdHJpbmdMaXRlcmFsIiwiaXNDb25kaXRpb25hbEV4cHJlc3Npb24iLCJjb25zZXF1ZW50IiwiYWx0ZXJuYXRlIl0sIm1hcHBpbmdzIjoiOzs7OztBQVFBLFNBQVNBLGNBQVQsQ0FBd0JDLEtBQXhCLEVBQStCO0FBQzdCLFNBQU8sQ0FBR0EsS0FBSCw4QkFBa0NDLE9BQWxDLENBQTBDLE9BQTFDLEVBQW1ELEdBQW5ELENBQVA7QUFDRDs7QUFFRCxTQUFTQyxlQUFULENBQXlCRixLQUF6QixFQUFnQztBQUM5QixNQUFJO0FBQ0YsV0FBT0csUUFBUUMsT0FBUixDQUFnQkosS0FBaEIsTUFBMkJHLFFBQVFDLE9BQVIsQ0FBZ0IsU0FBaEIsQ0FBbEM7QUFDRCxHQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1Y7QUFDQSxXQUFPLEtBQVA7QUFDRDtBQUNGOztrQkFFYztBQUFBLE1BQUdDLEtBQUgsUUFBR0EsS0FBSDtBQUFBLFNBQXVDO0FBQ3BEQyxhQUFTO0FBQ1BDLGVBQVM7QUFDUEMsYUFETyxpQkFDREMsSUFEQyxFQUNvQkMsS0FEcEIsRUFDa0M7QUFDdkNBLGdCQUFNQyxVQUFOO0FBQ0U7QUFDQUYsZUFBS0csU0FBTCxDQUFlQyxNQUFmLENBQXNCQyxJQUF0QixDQUNFO0FBQUEsbUJBQ0VDLE1BQU1DLElBQU4sS0FBZSxjQUFmLElBQ0FELE1BQU1oQixLQUFOLENBQVlrQixJQUFaLE9BQXVCLGdCQUZ6QjtBQUFBLFdBREYsQ0FGRjtBQU9EO0FBVE0sT0FERjtBQVlQQyx1QkFaTyw2QkFZV1QsSUFaWCxFQVlnQ0MsS0FaaEMsRUFZOEM7QUFDbkQsWUFBSSxDQUFDQSxNQUFNQyxVQUFQLElBQXFCVixnQkFBZ0JRLEtBQUtVLElBQUwsQ0FBVUMsTUFBVixDQUFpQnJCLEtBQWpDLENBQXpCLEVBQWtFO0FBQ2hFVSxlQUFLVSxJQUFMLENBQVVDLE1BQVYsQ0FBaUJyQixLQUFqQixHQUF5QkQsZUFBZVcsS0FBS1UsSUFBTCxDQUFVQyxNQUFWLENBQWlCckIsS0FBaEMsQ0FBekI7QUFDRDtBQUNGLE9BaEJNO0FBaUJQc0Isb0JBakJPLDBCQWlCUVosSUFqQlIsRUFpQjZCQyxLQWpCN0IsRUFpQjJDO0FBQ2hELFlBQ0UsQ0FBQ0EsTUFBTUMsVUFBUCxJQUNBRixLQUFLVSxJQUFMLENBQVVHLE1BQVYsQ0FBaUJDLElBQWpCLEtBQTBCLFNBRDFCLElBRUFkLEtBQUtVLElBQUwsQ0FBVUssU0FBVixDQUFvQkMsTUFBcEIsS0FBK0IsQ0FIakMsRUFJRTtBQUNBLGNBQU1DLFdBQVdqQixLQUFLVSxJQUFMLENBQVVLLFNBQVYsQ0FBb0IsQ0FBcEIsQ0FBakI7O0FBRUEsY0FBSW5CLE1BQU1zQixlQUFOLENBQXNCRCxRQUF0QixDQUFKLEVBQXFDO0FBQ25DLGdCQUFJekIsZ0JBQWdCeUIsU0FBUzNCLEtBQXpCLENBQUosRUFBcUM7QUFDbkMyQix1QkFBUzNCLEtBQVQsR0FBaUJELGVBQWU0QixTQUFTM0IsS0FBeEIsQ0FBakI7QUFDRDtBQUNGLFdBSkQsTUFJTyxJQUFJTSxNQUFNdUIsdUJBQU4sQ0FBOEJGLFFBQTlCLENBQUosRUFBNkM7QUFDbEQsZ0JBQ0VyQixNQUFNc0IsZUFBTixDQUFzQkQsU0FBU0csVUFBL0IsS0FDQTVCLGdCQUFnQnlCLFNBQVNHLFVBQVQsQ0FBb0I5QixLQUFwQyxDQUZGLEVBR0U7QUFDQTJCLHVCQUFTRyxVQUFULENBQW9COUIsS0FBcEIsR0FBNEJELGVBQzFCNEIsU0FBU0csVUFBVCxDQUFvQjlCLEtBRE0sQ0FBNUI7QUFHRDs7QUFFRCxnQkFDRU0sTUFBTXNCLGVBQU4sQ0FBc0JELFNBQVNJLFNBQS9CLEtBQ0E3QixnQkFBZ0J5QixTQUFTSSxTQUFULENBQW1CL0IsS0FBbkMsQ0FGRixFQUdFO0FBQ0EyQix1QkFBU0ksU0FBVCxDQUFtQi9CLEtBQW5CLEdBQTJCRCxlQUFlNEIsU0FBU0ksU0FBVCxDQUFtQi9CLEtBQWxDLENBQTNCO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7QUEvQ007QUFEMkMsR0FBdkM7QUFBQSxDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0IHR5cGUgeyBCYWJlbFR5cGVzLCBOb2RlUGF0aCB9IGZyb20gJy4uL3R5cGVzJztcblxudHlwZSBTdGF0ZSA9IHtcbiAgc2hvdWxkU2tpcDogYm9vbGVhbixcbn07XG5cbmZ1bmN0aW9uIGdldFJlcGxhY2VtZW50KHZhbHVlKSB7XG4gIHJldHVybiBgJHt2YWx1ZX0vYnVpbGQvaW5kZXgucnVudGltZS5qc2AucmVwbGFjZSgvXFwvXFwvL2csICcvJyk7XG59XG5cbmZ1bmN0aW9uIGlzTGluYXJpYUltcG9ydCh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiByZXF1aXJlLnJlc29sdmUodmFsdWUpID09PSByZXF1aXJlLnJlc29sdmUoJ2xpbmFyaWEnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0ICh7IHR5cGVzIH06IHsgdHlwZXM6IEJhYmVsVHlwZXMgfSkgPT4gKHtcbiAgdmlzaXRvcjoge1xuICAgIFByb2dyYW06IHtcbiAgICAgIGVudGVyKHBhdGg6IE5vZGVQYXRoPGFueT4sIHN0YXRlOiBTdGF0ZSkge1xuICAgICAgICBzdGF0ZS5zaG91bGRTa2lwID1cbiAgICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgICAgcGF0aC5jb250YWluZXIudG9rZW5zLnNvbWUoXG4gICAgICAgICAgICB0b2tlbiA9PlxuICAgICAgICAgICAgICB0b2tlbi50eXBlID09PSAnQ29tbWVudEJsb2NrJyAmJlxuICAgICAgICAgICAgICB0b2tlbi52YWx1ZS50cmltKCkgPT09ICdsaW5hcmlhLXByZXZhbCdcbiAgICAgICAgICApO1xuICAgICAgfSxcbiAgICB9LFxuICAgIEltcG9ydERlY2xhcmF0aW9uKHBhdGg6IE5vZGVQYXRoPGFueT4sIHN0YXRlOiBTdGF0ZSkge1xuICAgICAgaWYgKCFzdGF0ZS5zaG91bGRTa2lwICYmIGlzTGluYXJpYUltcG9ydChwYXRoLm5vZGUuc291cmNlLnZhbHVlKSkge1xuICAgICAgICBwYXRoLm5vZGUuc291cmNlLnZhbHVlID0gZ2V0UmVwbGFjZW1lbnQocGF0aC5ub2RlLnNvdXJjZS52YWx1ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBDYWxsRXhwcmVzc2lvbihwYXRoOiBOb2RlUGF0aDxhbnk+LCBzdGF0ZTogU3RhdGUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgIXN0YXRlLnNob3VsZFNraXAgJiZcbiAgICAgICAgcGF0aC5ub2RlLmNhbGxlZS5uYW1lID09PSAncmVxdWlyZScgJiZcbiAgICAgICAgcGF0aC5ub2RlLmFyZ3VtZW50cy5sZW5ndGggPT09IDFcbiAgICAgICkge1xuICAgICAgICBjb25zdCBhcmd1bWVudCA9IHBhdGgubm9kZS5hcmd1bWVudHNbMF07XG5cbiAgICAgICAgaWYgKHR5cGVzLmlzU3RyaW5nTGl0ZXJhbChhcmd1bWVudCkpIHtcbiAgICAgICAgICBpZiAoaXNMaW5hcmlhSW1wb3J0KGFyZ3VtZW50LnZhbHVlKSkge1xuICAgICAgICAgICAgYXJndW1lbnQudmFsdWUgPSBnZXRSZXBsYWNlbWVudChhcmd1bWVudC52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVzLmlzQ29uZGl0aW9uYWxFeHByZXNzaW9uKGFyZ3VtZW50KSkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHR5cGVzLmlzU3RyaW5nTGl0ZXJhbChhcmd1bWVudC5jb25zZXF1ZW50KSAmJlxuICAgICAgICAgICAgaXNMaW5hcmlhSW1wb3J0KGFyZ3VtZW50LmNvbnNlcXVlbnQudmFsdWUpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBhcmd1bWVudC5jb25zZXF1ZW50LnZhbHVlID0gZ2V0UmVwbGFjZW1lbnQoXG4gICAgICAgICAgICAgIGFyZ3VtZW50LmNvbnNlcXVlbnQudmFsdWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdHlwZXMuaXNTdHJpbmdMaXRlcmFsKGFyZ3VtZW50LmFsdGVybmF0ZSkgJiZcbiAgICAgICAgICAgIGlzTGluYXJpYUltcG9ydChhcmd1bWVudC5hbHRlcm5hdGUudmFsdWUpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBhcmd1bWVudC5hbHRlcm5hdGUudmFsdWUgPSBnZXRSZXBsYWNlbWVudChhcmd1bWVudC5hbHRlcm5hdGUudmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIH0sXG59KTtcbiJdfQ==