'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _templateObject = _taggedTemplateLiteral(['\n  /**\n   * THIS FILE IS AUTOGENERATED. DO NOT EDIT IT DIRECTLY OR COMMIT IT TO VERSION CONTROL.\n   * SOURCE: ', '\n   */\n\n  ', '\n  '], ['\n  /**\n   * THIS FILE IS AUTOGENERATED. DO NOT EDIT IT DIRECTLY OR COMMIT IT TO VERSION CONTROL.\n   * SOURCE: ', '\n   */\n\n  ', '\n  ']);

exports.default = extractStyles;
exports.clearCache = clearCache;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _dedent = require('dedent');

var _dedent2 = _interopRequireDefault(_dedent);

var _moduleSystem = require('../lib/moduleSystem');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var withPreamble = function withPreamble(filename, data) {
  return (0, _dedent2.default)(_templateObject, filename, data);
};

/**
 * Get output filename with directory structure from source preserved inside
 * custom outDir.
 */
function getOutputFilename(relativeFilename, absOutDir) {
  var basename = /(.+)\..+$/.exec(_path2.default.basename(relativeFilename))[1];
  var relativeOutputFilename = _path2.default.join(_path2.default.dirname(relativeFilename), basename + '.css');
  return _path2.default.join(absOutDir, relativeOutputFilename);
}

var stylesCache = {};

function hasCachedStyles(filename, styles) {
  return stylesCache[filename] && stylesCache[filename] === styles;
}

function createCssFromCache(filename) {
  return withPreamble(filename, Object.keys(stylesCache).reduce(function (acc, file) {
    return acc + '\n' + stylesCache[file];
  }, ''));
}

function addRequireForCss(types, program, filename) {
  program.node.body.unshift(types.expressionStatement(types.callExpression(types.identifier('require'), [types.stringLiteral(filename)])));
}

/**
 * Write styles to file and create directory if needed.
 */
function outputStylesToFile(filename, styles) {
  var throwImmediately = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  try {
    _fs2.default.writeFileSync(filename, styles);
  } catch (error) {
    if (!throwImmediately && (error.code === 'ENOENT' || /ENOENT/.test(error.message))) {
      _mkdirp2.default.sync(_path2.default.dirname(filename));
      outputStylesToFile(filename, styles, true);
    } else {
      throw error;
    }
  }
}

function extractStyles(types, program, currentFilename, options) {
  // Normalize current filename path.
  var relativeCurrentFilename = (0, _utils.relativeToCwd)(currentFilename);
  var absCurrentFilename = (0, _utils.makeAbsolute)(currentFilename);

  var _options$single = options.single,
      single = _options$single === undefined ? false : _options$single,
      _options$cache = options.cache,
      cache = _options$cache === undefined ? true : _options$cache,
      _options$extract = options.extract,
      extract = _options$extract === undefined ? true : _options$extract,
      _options$outDir = options.outDir,
      outDir = _options$outDir === undefined ? '.linaria-cache' : _options$outDir,
      _options$filename = options.filename,
      basename = _options$filename === undefined ? 'styles.css' : _options$filename;


  var absOutDir = _path2.default.isAbsolute(outDir) ? outDir : _path2.default.join(process.cwd(), outDir);

  // If single === true, we compute filename from outDir and filename options,
  // since there will be only one file, otherwise we need to reconstruct directory
  // structure inside outDir. In that case filename option is discard.
  var filename = single ? _path2.default.join(absOutDir, basename) : getOutputFilename(relativeCurrentFilename, absOutDir);
  var importPath = './' + _path2.default.relative(_path2.default.dirname(absCurrentFilename), filename);

  if (!extract) {
    return;
  }

  var sheet = (0, _moduleSystem.getCachedModule)(require.resolve('../../sheet.js'));
  var data = sheet ? sheet.exports.default.dump() : '';

  if (!data.length) {
    return;
  }

  if (cache) {
    if (single) {
      // If single === true, we cannot rely on filename since it will
      // always be the same, so we need to use absCurrentFilename.
      if (hasCachedStyles(absCurrentFilename, data)) {
        return;
      }
      stylesCache[absCurrentFilename] = data;
    } else {
      if (hasCachedStyles(filename, data)) {
        addRequireForCss(types, program, importPath);
        return;
      }
      stylesCache[filename] = data;
    }
  }

  if (single) {
    outputStylesToFile(filename, cache ? createCssFromCache(relativeCurrentFilename) : withPreamble(relativeCurrentFilename, data));
  } else {
    outputStylesToFile(filename, withPreamble(relativeCurrentFilename, data));
    addRequireForCss(types, program, importPath);
  }
}

function clearCache() {
  stylesCache = {};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,